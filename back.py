from flask import Flask, render_template, request, send_file
import requests, uuid, re, io

app = Flask(__name__)

api_url = "https://services.nvd.nist.gov/rest/json/cves/2.0?cveId="

pattern = r"^CVE-(1999|20[0-1][0-9]|202[0-4])-(?!0+$)\d{4,}$"

@app.route('/')
def index():
    return render_template('test.html', cache_id=str(uuid.uuid4()))

@app.route('/download_pdf', methods=['POST'])
def download_pdf():
    # Retrieve dynamic HTML content from the form
    html_content = request.form.get('html_content')

    # Convert the HTML content to a PDF
    pdf_file = HTML(string=html_content).write_pdf()

    # Create a memory buffer to store the PDF
    pdf_buffer = io.BytesIO(pdf_file)

    # Send the PDF file to the client
    return send_file(pdf_buffer, as_attachment=True, download_name='results.pdf', mimetype='application/pdf')

@app.route('/search', methods=['POST'])
def search():
    
    cve_id = request.form.get('cve_id').upper()
    info = {}
    
    if re.match(pattern, cve_id):
        try:
            response = requests.get(f"{api_url}{cve_id}", headers={"apiKey":"58ce1bf2-4700-4258-8d5a-09db0fa4be89"})
        
            if response.status_code == 200:
                try:
                    data = response.json()
                    vulns = data.get('vulnerabilities', [])

                    if vulns:
                        cve_data = vulns[0].get('cve', {})
                        
                        publish_date = cve_data.get("published", "N/A")
                        lastmod_date = cve_data.get("lastModified", "N/A")
                        
                        if (publish_date and lastmod_date) and (("T" in publish_date) and ("T" in lastmod_date)):
                            publish_date = publish_date.split('T')
                            lastmod_date = lastmod_date.split('T')
                            publish_date[1] = publish_date[1].split('.')[0]
                            lastmod_date[1] = lastmod_date[1].split('.')[0]
                            publish_date = f"{publish_date[0]} {publish_date[1]}"
                            lastmod_date = f"{lastmod_date[0]} {lastmod_date[1]}"
                        
                        status = cve_data.get("vulnStatus", "N/A")
                        desc = cve_data.get('descriptions', [])[0].get('value', "N/A")
                        
                        metrics = cve_data.get('metrics', {})
                        metrics_list = list(metrics)
                        
                        if len(metrics_list) >= 1:
                            cvss_data = metrics.get(metrics_list[0], [])
                            
                            version = cvss_data[0].get('cvssData', {}).get('version', 'N/A')
                            vector_string = cvss_data[0].get('cvssData', {}).get('vectorString', 'N/A')
                            base_score = cvss_data[0].get('cvssData', {}).get('baseScore', 'N/A')
                         
                            if "3" in metrics_list[0]:
                                base_severity = cvss_data[0].get('cvssData', {}).get('baseSeverity', 'N/A')
                            else:
                                base_severity = cvss_data[0].get('baseSeverity', 'N/A')
                        else:
                            version = 'N/A'
                            vector_string = 'N/A'
                            base_score = 'N/A'
                            base_severity = 'N/A'
                        
                
                        weaknesses = cve_data.get('weaknesses', [])
                        
                        if len(weaknesses) >= 1:
                            weakness = weaknesses[0].get('description', [])[0].get('value', 'N/A')
                        else:
                            weakness = 'N/A'
                        
                        info['cve_id'] = cve_id
                        info['publish_date'] = publish_date
                        info['lastmod_date'] = lastmod_date
                        info['status'] = status
                        info['desc'] = desc
                        info['weakness'] = weakness
                        info['version'] = version
                        info['vector_string'] = vector_string
                        info['base_score'] = base_score
                        info['base_severity'] = base_severity

                    else:
                        info['error'] = "No vulnerabilities found for this CVE ID."
                except requests.exceptions.JSONDecodeError:
                    info['error'] = "Failed to parse JSON response from the server."
            else:
                info['error'] = f"Error fetching data: {response.status_code} - {response.reason}"
        except requests.exceptions.RequestException as e:
            info['error'] = f"Request failed: {str(e)}"
    else:
        info['error'] = "Get o terefde oyna Mahal"
    

    return render_template('test.html', info=info)

if __name__ == '__main__':
    app.run(host='localhost', port=3169)
